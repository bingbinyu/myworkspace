Musterlösung Übung 1

Aufgabe 1 (4 Punkte)

  1. echo "Hallo Wurzel" >wurzel

     [0.5 P]

     Die Ausgabe des Kommandos echo wird in die neu angelegte
     Datei wurzel umgelenkt.

  2. echo "Wurzelverzeichnis: " >wurzel

     [0.5 P]

     Der Inhalt von Wurzel wird mit der Ausgabe des Kommandos echo
     überschrieben.

  3. ls -l / >>wurzel

     Die Ausgabe des Kommandos ls wird an die Datei wurzel angehängt.

     [0.5 P] Ausgabeumlenkung

  4. (tail -n +3 |cut -b2-4,43-) <wurzel |sort -k2

     [0.5 P]  Es wird ein neuer Kindprozess erzeugt, in dem das Kommando
              tail in einem Kindprozess ausgeführt wird.
     [0.5 P]  Eingabeumlenkung des Inhalts der Datei Wurzel an den
              Enkelprozess (tail).
     [0.5 P]  Es wird in dem Kindprozess ein weiterer Prozess erzeugt,
              der das Programm cut ausführt.
     [0.5 P]  Die Ausgabe von tail wird auf den Standardeingabekanal
              von cut geschickt.              
     [0.5 P]  Es wird ein neuer Prozess gestartet und das Programm sort
              ausgeführt. Die Ausgabe des ersten Kindprozesses wird auf
              den Standardeingabekanal von sort geschickt.

   5. Typische Fehler

     Gern wird die rechte Seite einer Pipe als Datei angesehen und
     alles dahinter ignoriert. Diese und ähnliche Ungenauigkeiten
     solltet ihr nach eigenem Ermessen mit jeweils -0.5 P ahnden.

Aufgabe 2 (6 Punkte)
   
   in process():
     +0.5 P:  Rekursive Verarbeitung von Einträgen
     +0.5 P:  Unterscheidung reguläre Datei/Verzeichnis
     +0.5 P:  Aufruf von opendir()
     +0.5 P:  Verzeichniseinträge mit readdir() lesen
     +0.5 P:  Behandlung von d_name, Sonderfälle '.' und '..'
     +0.5 P:  Aufruf von closedir()

   in TypeMatcher::matches():
     +0.5 P:  lstat() auf path
     +0.5 P:  st_mode & S_IFMT mit ifmt vergleichen

   in FilenameMatcher::matches():
     +0.5 P:  letzte Pfadkomponente von path mit filename vergleichen

   in NewerMatcher::matches():
     +0.5 P:  stat() auf path, mtime mit mit st.st_mtime vergleichen
              (Auf modernen Linux-Installationen -- nicht auf den
               x-Rechnern im Fachbereichsnetz -- wäre es genauer,
               mit st_mtim.tv_sec und st_mtim.tv_nsec zu vergleichen.)
     +0.5 P:  good berücksichtigen
   
   Fehlerausgaben
     +0.5 P: wenn hinreichend sinnvolle Fehlerausgaben mit strerror(errno)
             gemacht werden

   Abzüge entsprechend des allgemeinen Programmierfehlerkatalogs.

   Die Tests müssen mindestens die Testfälle aus dem Tutorium (Folien TBD)
   berücksichtigen, darunter verschiedene Dateitypen, Endlosschleifen bei
   Links, Suffix, Änderungszeiten.
